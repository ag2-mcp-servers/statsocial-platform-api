# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:59:32+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    ApplicationStatus,
    CreateTweet,
    CreateTwitter,
    CustomCreate,
    CustomGenerate,
    CustomInsert,
    Field400Error,
    Field401Error,
    Field403Error,
    Field404Error,
    Field500Error,
    Ids,
    ReportDates,
    ReportStatus,
    ReportSuccess,
)

app = MCPProxy(
    description="API Reference: <br><br> The StatSocial API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP authentication and HTTP verbs, which can be understood by off-the-shelf HTTP clients, and we support cross-origin resource sharing to allow you to interact securely with our API from a client-side web application (remember that you should never expose your secret API key in any public website's client-side code). JSON will be returned in all responses from the API, including errors (though if you're using API bindings, we will convert the response to the appropriate language-specific object).<br><br>Contact help@statsocial.com to obtain a test API key",
    title='StatSocial Platform API',
    version='1.0.0',
    servers=[{'url': 'http://api.statsocial.com/api'}],
)


@app.get(
    '/applications/status/',
    description=""" Remaining window and remaining count details, also returns reports that have been generated by this account.
 """,
    tags=['report_status_checks'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_applications_status_(key: str):
    """
    Used to understand API usage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/',
    description=""" Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance. """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_(
    report_hash: str,
    baseline: Optional[int] = None,
    report_date: Optional[int] = None,
    sample: int = 1,
):
    """
    Obtain report output
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/',
    description=""" Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance.
 """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_(
    report_hash: str,
    baseline: Optional[int] = None,
    report_date: Optional[int] = None,
    sample: int = 1,
):
    """
    Obtain report output
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/custom/create/',
    description=""" Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
 """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_custom_create_(upload_hash: str, filter: Optional[str] = None):
    """
    Step 3 of executing custom report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/custom/create/',
    description=""" Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
 """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_custom_create_(upload_hash: str, filter: Optional[str] = None):
    """
    Step 3 of executing custom report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/custom/generate/',
    description=""" Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
 """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_custom_generate_(report_name: str):
    """
    Step 1 of executing custom report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/custom/generate/',
    description=""" Used to create a custom report. This report treats the list of ids or handles as the audience (not their followers as in the twitter report). To create follower or tweet reports other methods must be used.
 """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_custom_generate_(report_name: str):
    """
    Step 1 of executing custom report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/custom/insert/',
    description=""" Inserting twitter ids or handles into a custom report. This is used for custom reports only
 """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_custom_insert_(upload_hash: str, ids: Ids = ...):
    """
    Step 2 of executing custom report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/custom/insert/',
    description=""" Inserting twitter ids or handles into a custom report. This is used for custom reports only
 """,
    tags=['report_generation', 'twitter_activity_report_creation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_custom_insert_(upload_hash: str, ids: Ids = ...):
    """
    Step 2 of executing custom report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/dates/',
    description=""" Get report dates available for a specific report.
 """,
    tags=['report_status_checks'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_dates_(report_hash: str):
    """
    Get report dates available for a specific report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/dates/',
    description=""" Get report dates available for a specific report.
 """,
    tags=['report_generation', 'report_status_checks'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_dates_(report_hash: str):
    """
    Get report dates available for a specific report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/status/',
    description=""" Returns a list of custom reports generated by user (report name to upload hash etc).
 """,
    tags=['report_generation', 'report_status_checks'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_status_(report_hash: str):
    """
    Get list of generated reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/status/',
    description=""" Returns a list of custom reports generated by user (report name to upload hash etc).
 """,
    tags=['report_generation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_status_(report_hash: str):
    """
    Get list of generated reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/tweet/create/',
    description=""" This report details the audience of the users who have tweeted content that matches what was provided in the keywords. To create custom or twitter reports other methods must be used.
 """,
    tags=['report_generation', 'twitter_activity_report_creation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_tweet_create_(
    report_name: str,
    start_date: int = ...,
    end_date: int = ...,
    terms: str = ...,
    filter: Optional[str] = None,
):
    """
    Used to create tweet reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/tweet/create/',
    description=""" This report details the audience of the users who have tweeted content that matches what was provided in the keywords. To create custom or twitter reports other methods must be used.
 """,
    tags=['report_generation', 'twitter_activity_report_creation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_tweet_create_(
    report_name: str,
    start_date: int = ...,
    end_date: int = ...,
    terms: str = ...,
    filter: Optional[str] = None,
):
    """
    Used to create tweet reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/twitter/create/',
    description=""" This report uses the twitter followers as the audience. To create custom or tweet reports other methods must be used. Any report older than two days will be automatically regenerated upon create.
 """,
    tags=['report_generation', 'twitter_activity_report_creation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def get_reports_twitter_create_(
    twitter_id: Optional[int] = None,
    twitter_handle: Optional[str] = None,
    filter: Optional[str] = None,
):
    """
    Used to create twitter follower report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/reports/twitter/create/',
    description=""" This report uses the twitter followers as the audience. To create custom or tweet reports other methods must be used. Any report older than two days will be automatically regenerated upon create.
 """,
    tags=['report_generation', 'twitter_activity_report_creation'],
    security=[
        APIKeyHeader(name="api_key"),
    ],
)
def post_reports_twitter_create_(
    twitter_id: Optional[int] = None,
    twitter_handle: Optional[str] = None,
    filter: Optional[str] = None,
):
    """
    Used to create twitter follower report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
